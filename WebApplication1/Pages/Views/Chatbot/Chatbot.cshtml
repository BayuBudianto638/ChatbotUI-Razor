@page
@{
    ViewData["Title"] = "Chatbot - Kacrut AI";
}

<div class="chat-wrapper">
    <div class="chat-sidebar">
        <h3>Chat History</h3>
        <button id="new-session-button" class="btn-primary">New Session</button>
        <ul id="chat-history-list"></ul>
    </div>

    <div class="chat-container">
        <div class="chat-history" id="chat-history"></div>

        <div class="input-area">
            <input type="text" id="user-input" placeholder="Ask me anything..." />
            <button id="send-button">Send</button>
        </div>
    </div>

    <div class="knowledge-sidebar">
        <h3>Knowledge Books</h3>
        <button id="new-upload-button" class="btn-primary">Upload Books</button>
        <input type="file" id="file-input" style="display: none;" />
        <ul id="knowledge-history-list"></ul>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            await loadChatHistory(); 
        });

        $(document).ready(function () {
            $("#new-upload-button").click(function () {
                $("#file-input").click(); 
            });

            $("#file-input").change(function () {
                var file = this.files[0];
                if (!file) return; 

                var formData = new FormData();
                formData.append("file", file);

                $.ajax({
                    url: "/Chatbot/UploadFile", 
                    type: "POST",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        alert("File uploaded successfully!");
                    },
                    error: function (xhr) {
                        alert("Upload failed: " + xhr.responseText);
                    }
                });
            });
        });

        document.addEventListener("DOMContentLoaded", async function () {
            await loadUploadedFiles();
        });

        async function loadUploadedFiles() {
            try {
                const response = await fetch("/Chatbot/GetUploadedFiles");
                const data = await response.json();

                if (!data.success) {
                    console.error("Failed to fetch uploaded files.");
                    return;
                }

                const fileList = document.getElementById("knowledge-history-list");
                fileList.innerHTML = "";

                data.listKnowledge.forEach(file => {
                    const listItem = document.createElement("li");
                    listItem.textContent = file.fileName;
                    fileList.appendChild(listItem);
                });
            } catch (error) {
                console.error("Error loading uploaded files:", error);
            }
        }

        document.getElementById("send-button").addEventListener("click", async function () {
            const userInput = document.getElementById("user-input").value;
            if (!userInput) return;

            addMessageToChat("user", userInput);
            document.getElementById("user-input").value = "";

            try {
                const response = await fetch("/Chatbot/SendMessage", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(userInput),
                });

                const result = await response.json();
                if (result.success) {
                    const formattedMessage = formatAIResponse(result.message);
                    addMessageToChat("ai", formattedMessage);
                } else {
                    addMessageToChat("ai", "Error: " + result.message);
                }
            } catch (error) {
                addMessageToChat("ai", "Error: " + error.message);
            }
        });

        async function createNewSession() {
            try {
                const response = await fetch("/Chatbot/CreateNewSession", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                });

                const data = await response.json();

                if (!data.success) {
                    console.error("Failed to create a new session.");
                    return;
                }

                const chatHistoryContainer = document.getElementById("chat-history");
                chatHistoryContainer.innerHTML = "";

                loadChatSessions();

                console.log("New session created:", data.sessionId);
            } catch (error) {
                console.error("Error creating new session:", error);
            }
        }

        function addMessageToChat(role, message) {
            const chatHistory = document.getElementById("chat-history");
            let formattedMessage;

            if (role === "ai") {
                const messageElement = document.createElement("div");
                messageElement.className = `message ${role}`;
                formattedMessage = message; 
                chatHistory.insertAdjacentHTML("beforeend", `<p class="${role}">${formattedMessage}</p>`);
            } else {
                const messageElement = document.createElement("div");
                messageElement.className = `message ${role}`;
                messageElement.textContent = message;
                chatHistory.appendChild(messageElement);
            }

            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        function formatAIResponse(response) {
            return response;
        }

        document.addEventListener("DOMContentLoaded", async function () {
            await loadChatSessions();
        });

        async function loadChatSessions() {
            try {
                const response = await fetch("/Chatbot/GetChatSessions"); 
                const data = await response.json();

                if (!data.success) {
                    console.error("Failed to fetch chat sessions.");
                    return;
                }

                const sessionList = document.getElementById("chat-history-list");
                sessionList.innerHTML = ""; 

                data.chatSessions.forEach(session => {
                    const listItem = document.createElement("li");

                    const startTime = new Date(session.startTime).toLocaleString();
                    const sessionText = document.createTextNode(`${startTime} - ${session.status}`);
                    listItem.appendChild(sessionText);
                    listItem.addEventListener("click", () => loadChatHistory(session.id));
                    sessionList.appendChild(listItem);
                });
            } catch (error) {
                console.error("Error loading chat sessions:", error);
            }
        }

        async function loadChatHistory(sessionId) {
            try {
                const response = await fetch(`/Chatbot/GetChatHistory/${sessionId}`);
                const data = await response.json();

                if (!data.success) {
                    console.error("Failed to fetch chat history.");
                    return;
                }

                const chatHistoryContainer = document.getElementById("chat-history");
                chatHistoryContainer.innerHTML = "";
                data.chatHistory.forEach(message => {
                    const messageContent = message.role === "ai" ? parseMarkdown(message.message) : message.message;
                    addMessageToChat(message.role, messageContent);
                });
            } catch (error) {
                console.error("Error loading chat history:", error);
            }
        }

        function parseMarkdown(markdown) {
            if (!markdown || markdown.trim() === "") {
                return "";
            }

            markdown = markdown.replace(/</g, "&lt;").replace(/>/g, "&gt;");
            
            markdown = markdown.replace(/^###### (.*)/gm, "<h6>$1</h6>");
            markdown = markdown.replace(/^##### (.*)/gm, "<h5>$1</h5>");
            markdown = markdown.replace(/^#### (.*)/gm, "<h4>$1</h4>");
            markdown = markdown.replace(/^### (.*)/gm, "<h3>$1</h3>");
            markdown = markdown.replace(/^## (.*)/gm, "<h2>$1</h2>");
            markdown = markdown.replace(/^# (.*)/gm, "<h1>$1</h1>");
            
            markdown = markdown.replace(/\*\*\*(.*?)\*\*\*/g, "<b><i>$1</i></b>");
            markdown = markdown.replace(/\*\*(.*?)\*\*/g, "<b>$1</b>");
            markdown = markdown.replace(/\*(.*?)\*/g, "<i>$1</i>");
            
            markdown = markdown.replace(/~~(.*?)~~/g, "<del>$1</del>");

            markdown = markdown.replace(/^> (.*)/gm, "<blockquote>$1</blockquote>");

            markdown = markdown.replace(/^\* (.*)/gm, "<ul><li>$1</li></ul>");
            markdown = markdown.replace(/^- (.*)/gm, "<ul><li>$1</li></ul>");

            markdown = markdown.replace(/^(\d+)\. (.*)/gm, "<ol><li>$2</li></ol>");

            markdown = markdown.replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2">$1</a>');

            markdown = markdown.replace(/!\[(.*?)\]\((.*?)\)/g, '<img src="$2" alt="$1">');

            markdown = markdown.replace(/```([\s\S]*?)```/g, "<pre><code>$1</code></pre>");
            markdown = markdown.replace(/`(.*?)`/g, "<code>$1</code>");

            markdown = markdown.replace(/^(\*\*\*|---|___)\s*$/gm, "<hr>");

            markdown = markdown.replace(/<\/ul>\s*<ul>/g, "");
            markdown = markdown.replace(/<\/ol>\s*<ol>/g, "");

            return markdown.trim();
        }
    </script>

    <style>
        .chat-wrapper {
            display: flex;
            height: 100vh;
            overflow: hidden;
        }

        .chat-sidebar {
            width: 250px;
            background: white;
            color: black;
            padding: 15px;
            overflow-y: auto;
            flex-shrink: 0; 
            height: 100vh;
            border-right: 2px solid #ccc; 
            border: 2px solid grey;
        }

        .chat-sidebar h3 {
            margin-bottom: 10px;
            font-size: 18px;
        }

        .chat-sidebar ul {
            list-style: none;
            padding: 0;
        }

        .chat-sidebar ul li {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #444;
        }

        .chat-sidebar ul li:hover {
            background: cadetblue;
        }

        .chat-container {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            height: 100vh;
            padding: 10px;
        }

        .chat-history {
            flex-grow: 1;
            overflow-y: auto;
            padding: 10px;
            border: 1px solid #ccc;
        }

        .input-area {
            display: flex;
            padding: 10px;
            background: white;
            border-top: 1px solid #ccc;
        }

        .input-area input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }

        .input-area button {
            background-color: blue;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .message {
            margin: 10px 0;
            padding: 10px;
            border-radius: 8px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .message.user {
            background: #007bff;
            color: white;
            text-align: right;
            align-self: flex-end;
            margin-left: auto;
        }

        .message.ai {
            background: #007bff;
            color: white;
            text-align: left;
            align-self: flex-start;
            margin-right: auto;
        }

        #chat-history-list {
            list-style-type: none;
            padding: 0;
        }

        #chat-history-list li {
            padding: 10px;
            border-bottom: 1px solid #ddd;
            cursor: pointer;
        }

        #chat-history-list li:last-child {
            border-bottom: none;
        }

        #chat-history-list li:hover {
            background-color: lightblue;
        }

        .knowledge-sidebar {
            width: 250px;
            background: white;
            color: black;
            padding: 15px;
            overflow-y: auto;
            flex-shrink: 0;
            height: 100vh;
            border-right: 2px solid #ccc;
            border: 2px solid grey;
        }

        .knowledge-sidebar h3 {
            margin-bottom: 10px;
            font-size: 18px;
        }

        .knowledge-sidebar ul {
            list-style: none;
            padding: 0;
        }

        .knowledge-sidebar ul li {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #ddd;
        }

        .knowledge-sidebar ul li:hover {
            background-color: #f0f0f0; 
        }
    </style>
}